회원 수정 기능을 구현하기 위해, ID를 기반으로 특정 회원 정보를 수정하는 로직을 작성할 수 있습니다. 회원 수정은 다음과 같은 흐름으로 구성됩니다:

1. **회원 목록에서 수정 버튼 클릭**: 수정할 회원을 선택하고 수정 버튼을 클릭하면 회원 수정 페이지로 이동합니다.
2. **수정 폼에서 데이터 입력**: 회원 정보를 수정할 수 있는 입력 폼이 제공됩니다.
3. **폼 제출 후 서버로 전송**: 수정된 정보를 서버에 전송하여 데이터베이스에서 업데이트합니다.

### 1. **UserController 수정**
회원 수정 폼을 띄우고, 수정된 데이터를 처리하는 코드를 작성합니다.

```java
package com.example.tobi.springbootbasic.controller;

import com.example.tobi.springbootbasic.dto.MemberCreateRequestDTO;
import com.example.tobi.springbootbasic.dto.MemberResponseDTO;
import com.example.tobi.springbootbasic.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequiredArgsConstructor
@RequestMapping("/users")
public class UserController {

    private final UserService userService;

    @GetMapping
    public String findAllUsers(Model model) {
        List<MemberResponseDTO> users = userService.findAll();
        model.addAttribute("users", users);
        return "user-list";
    }

    @GetMapping("/update/{id}")
    public String updateForm(@PathVariable Long id, Model model) {
        MemberResponseDTO user = userService.findById(id);
        model.addAttribute("user", user);  // 수정할 사용자 정보를 모델에 추가
        return "user-update";  // 회원 수정 페이지로 이동
    }

    @PostMapping("/update/{id}")
    public String updateUser(@PathVariable Long id, @ModelAttribute MemberCreateRequestDTO request, Model model) {
        boolean isUpdated = userService.updateUser(id, request);
        if (isUpdated) {
            return "redirect:/users";  // 수정 성공 시, 사용자 목록 페이지로 리디렉션
        } else {
            model.addAttribute("error", "회원 정보를 수정할 수 없습니다.");
            return "user-update";  // 수정 실패 시, 같은 페이지에 오류 메시지와 함께 반환
        }
    }
}
```

### 2. **user-update.html** (회원 수정 입력 폼)
회원 정보를 수정할 수 있는 폼을 작성합니다.

```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>회원 수정</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
<div class="container mt-5">
    <h2>회원 수정</h2>
    <form th:action="@{/users/update/{id}(id=${user.id})}" method="post" th:object="${user}">
        <div class="form-group">
            <label for="name">이름</label>
            <input type="text" class="form-control" id="name" th:field="*{name}" required>
        </div>

        <div class="form-group">
            <label for="email">이메일</label>
            <input type="email" class="form-control" id="email" th:field="*{email}" required>
        </div>

        <div class="form-group">
            <label for="userid">사용자 ID</label>
            <input type="text" class="form-control" id="userid" th:field="*{userid}" required>
        </div>

        <div class="form-group">
            <label for="password">비밀번호</label>
            <input type="password" class="form-control" id="password" th:field="*{password}" required>
        </div>

        <!-- 오류 메시지 표시 -->
        <div th:if="${error}" class="alert alert-danger mt-3" th:text="${error}"></div>

        <button type="submit" class="btn btn-primary">수정</button>
    </form>
</div>

<!-- Optional JavaScript -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
```

### 3. **UserService 수정** (회원 수정 로직)

회원 정보 수정 로직을 추가합니다. 수정된 회원 정보를 업데이트합니다.

```java
package com.example.tobi.springbootbasic.service;

import com.example.tobi.springbootbasic.dto.MemberCreateRequestDTO;
import com.example.tobi.springbootbasic.mapper.UserMapper;
import com.example.tobi.springbootbasic.model.User;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class UserService {

    private final UserMapper userMapper;

    public boolean updateUser(Long id, MemberCreateRequestDTO request) {
        User user = userMapper.findById(id);
        if (user != null) {
            // 회원 정보 수정
            user.setName(request.getName());
            user.setEmail(request.getEmail());
            user.setUserid(request.getUserid());
            user.setPassword(request.getPassword());  // 비밀번호는 필요시 암호화 적용 가능

            userMapper.updateUser(user);  // DB에 수정된 정보 업데이트
            return true;
        }
        return false;
    }
}
```

### 4. **UserMapper 수정**

MyBatis 쿼리를 작성하여 회원 정보를 업데이트하는 로직을 추가합니다.

```xml
<update id="updateUser" parameterType="com.example.tobi.springbootbasic.model.User">
    UPDATE user
    SET name = #{name},
        email = #{email},
        userid = #{userid},
        password = #{password}
    WHERE id = #{id};
</update>
```

### 5. **user-list.html 수정** (수정 버튼 추가)

회원 목록에서 수정 버튼을 클릭하면 수정 페이지로 이동할 수 있도록 수정 링크를 추가합니다.

```html
<a th:href="@{/users/update/{id}(id=${user.id})}" class="btn btn-primary btn-sm">수정</a>
```

### 최종 흐름 요약:
1. 회원 목록에서 **수정 버튼**을 클릭하면, 해당 회원의 정보를 수정할 수 있는 폼이 표시됩니다.
2. **회원 수정 페이지**에서 필요한 정보를 수정한 후, 수정된 정보를 POST 방식으로 서버에 전송합니다.
3. 서버는 수정된 정보를 데이터베이스에 저장하고, 수정이 성공하면 회원 목록 페이지로 리디렉션됩니다.