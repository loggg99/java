SQL 쿼리를 직접 사용하여 검색 기능을 구현할 수 있는 방법은 여러 가지가 있지만, 일반적으로 **JDBC** 또는 **MyBatis**, 그리고 **Spring Data JPA**의 `@Query` 어노테이션 등을 사용할 수 있습니다. 여기서는 **JDBC를 사용한 검색 기능 구현**과 **MyBatis를 사용하는 방법**을 예로 들어 설명하겠습니다.

### 1. JDBC를 이용한 검색 기능

먼저 **JDBC**를 사용하여 SQL 쿼리를 직접 실행하는 방법을 살펴보겠습니다.

#### 1.1 데이터베이스 설정
먼저 `application.properties`에 데이터베이스 설정을 추가해야 합니다. 예를 들어 MySQL을 사용하는 경우:

```properties
spring.datasource.url=jdbc:mysql://localhost:3306/shop_db
spring.datasource.username=root
spring.datasource.password=your_password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
```

#### 1.2 DAO (Data Access Object) 클래스 작성
다음은 **JDBC**를 사용하여 데이터베이스에서 검색 결과를 가져오는 DAO 클래스입니다.

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class ProductDAO {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    // Product를 매핑하는 RowMapper
    private RowMapper<Product> productRowMapper = (rs, rowNum) -> {
        Product product = new Product();
        product.setId(rs.getLong("id"));
        product.setName(rs.getString("name"));
        product.setDescription(rs.getString("description"));
        return product;
    };

    // 키워드로 제품 검색
    public List<Product> searchProducts(String keyword) {
        String sql = "SELECT * FROM Product WHERE name LIKE ? OR description LIKE ?";
        String searchKeyword = "%" + keyword + "%"; // SQL에서 LIKE 연산자를 위해 문자열 패턴 설정
        return jdbcTemplate.query(sql, new Object[]{searchKeyword, searchKeyword}, productRowMapper);
    }
}
```

- `JdbcTemplate`을 사용하여 SQL 쿼리를 실행합니다.
- 쿼리는 `name` 또는 `description` 컬럼에 `LIKE` 연산자를 적용하여 키워드로 검색합니다.
- 결과는 `RowMapper`를 사용해 `Product` 객체로 변환됩니다.

#### 1.3 서비스 클래스
서비스 클래스에서 DAO를 호출해 검색 결과를 처리합니다.

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ProductService {

    @Autowired
    private ProductDAO productDAO;

    public List<Product> searchProducts(String keyword) {
        return productDAO.searchProducts(keyword);
    }
}
```

#### 1.4 컨트롤러 클래스
검색 요청을 받아 처리하는 컨트롤러입니다.

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Controller
public class ProductController {

    @Autowired
    private ProductService productService;

    @GetMapping("/search")
    public String searchProducts(@RequestParam("keyword") String keyword, Model model) {
        List<Product> products = productService.searchProducts(keyword);
        model.addAttribute("products", products);
        return "search-results";
    }
}
```

### 2. MyBatis를 사용한 검색 기능

MyBatis는 SQL을 XML 파일에 작성하여, 데이터베이스와의 상호작용을 간결하게 할 수 있는 프레임워크입니다. 다음은 MyBatis를 사용한 검색 기능 구현 방법입니다.

#### 2.1 MyBatis 설정

**`application.properties`**에 MyBatis 설정을 추가합니다.

```properties
mybatis.mapper-locations=classpath:mappers/*.xml
spring.datasource.url=jdbc:mysql://localhost:3306/shop_db
spring.datasource.username=root
spring.datasource.password=your_password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
```

#### 2.2 MyBatis Mapper 작성

**XML Mapper 파일**을 작성하여 SQL 쿼리를 정의합니다. 예를 들어 `ProductMapper.xml` 파일을 `resources/mappers` 폴더에 추가합니다.

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.shop.mapper.ProductMapper">
    <select id="searchProducts" resultType="com.example.shop.model.Product">
        SELECT * FROM Product
        WHERE name LIKE CONCAT('%', #{keyword}, '%')
           OR description LIKE CONCAT('%', #{keyword}, '%')
    </select>
</mapper>
```

- `#{keyword}`는 MyBatis가 파라미터로 전달된 값을 SQL 쿼리에 매핑하는 부분입니다.

#### 2.3 MyBatis Mapper 인터페이스

SQL 쿼리를 호출할 MyBatis Mapper 인터페이스를 작성합니다.

```java
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import java.util.List;

@Mapper
public interface ProductMapper {

    List<Product> searchProducts(@Param("keyword") String keyword);
}
```

#### 2.4 서비스 클래스

MyBatis Mapper를 서비스 클래스에서 호출합니다.

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ProductService {

    @Autowired
    private ProductMapper productMapper;

    public List<Product> searchProducts(String keyword) {
        return productMapper.searchProducts(keyword);
    }
}
```

#### 2.5 컨트롤러 클래스

컨트롤러에서 서비스 메서드를 호출하여 검색 결과를 반환합니다.

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Controller
public class ProductController {

    @Autowired
    private ProductService productService;

    @GetMapping("/search")
    public String searchProducts(@RequestParam("keyword") String keyword, Model model) {
        List<Product> products = productService.searchProducts(keyword);
        model.addAttribute("products", products);
        return "search-results";
    }
}
```

### 검색 결과를 표시하는 HTML (`search-results.html`)
```html
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>검색 결과</title>
</head>
<body>
    <h1>검색 결과</h1>
    <ul>
        <li th:each="product : ${products}">
            <span th:text="${product.name}">상품명</span>
            <span th:text="${product.description}">상품 설명</span>
        </li>
    </ul>
</body>
</html>
```

### 결론:
- **JDBC**는 SQL 쿼리를 직접 실행하기 때문에 자유롭게 쿼리를 작성할 수 있고, 간단한 프로젝트에 적합합니다.
- **MyBatis**는 SQL 쿼리를 XML 파일에서 관리할 수 있어, SQL 쿼리를 보다 명확하게 작성하고 관리할 수 있으며, 복잡한 쿼리 로직이 필요한 경우에 유용합니다.

두 가지 방법 모두 `LIKE`를 이용한 검색 기능을 쉽게 구현할 수 있으며, 각각의 장단점에 따라 선택할 수 있습니다.