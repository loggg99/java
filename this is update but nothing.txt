수정 기능을 구현하려면, 사용자가 제출한 데이터를 받아 기존의 사용자 정보를 업데이트하는 방식으로 처리해야 합니다. 이를 위해 **PUT** 요청을 처리하는 메소드와 프론트엔드에서 수정 요청을 보낼 수 있는 폼을 구현하면 됩니다.

### 1. **MyBatis Mapper 수정** (회원 수정 쿼리 추가)
```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.tobi.springbootbasic.mapper.UserMapper">

    <select id="findAll" resultType="com.example.tobi.springbootbasic.model.User">
        SELECT * FROM user;
    </select>

    <select id="findById" parameterType="long" resultType="com.example.tobi.springbootbasic.model.User">
        SELECT * FROM user WHERE id = #{id};
    </select>

    <insert id="insertUser" parameterType="com.example.tobi.springbootbasic.model.User">
        INSERT INTO user(name, email, userid, password) VALUES ( #{name}, #{email}, #{userid}, #{password} );
    </insert>

    <!-- 회원 수정 쿼리 추가 -->
    <update id="updateUser" parameterType="com.example.tobi.springbootbasic.model.User">
        UPDATE user
        SET name = #{name}, email = #{email}, userid = #{userid}, password = #{password}
        WHERE id = #{id};
    </update>

    <delete id="deleteUser" parameterType="long">
        DELETE FROM user WHERE id = #{id};
    </delete>

</mapper>
```

### 2. **UserMapper 수정** (회원 수정 메소드 추가)
```java
package com.example.tobi.springbootbasic.mapper;

import com.example.tobi.springbootbasic.model.User;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;

@Mapper
public interface UserMapper {
    List<User> findAll();
    User findById(long id);
    void insertUser(User user);
    
    // 회원 수정 메소드 추가
    void updateUser(User user);

    // 회원 삭제 메소드
    void deleteUser(long id);
}
```

### 3. **UserService 수정** (회원 수정 서비스 추가)
```java
package com.example.tobi.springbootbasic.service;

import com.example.tobi.springbootbasic.dto.MemberResponseDTO;
import com.example.tobi.springbootbasic.mapper.UserMapper;
import com.example.tobi.springbootbasic.model.User;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class UserService {

    private final UserMapper userMapper;

    public List<MemberResponseDTO> findAll() {
        List<User> users = userMapper.findAll();
        return users.stream()
                .map(User::toMemberResponseDTO)
                .collect(Collectors.toList());
    }

    public MemberResponseDTO findById(Long id) {
        return userMapper.findById(id)
                .toMemberResponseDTO();
    }

    public void createUser(User user) {
        userMapper.insertUser(user);
    }

    // 회원 수정 서비스 추가
    public void updateUser(User user) {
        userMapper.updateUser(user);
    }

    public void deleteUser(Long id) {
        userMapper.deleteUser(id);
    }
}
```

### 4. **UserController 수정** (회원 수정 메소드 추가)
```java
package com.example.tobi.springbootbasic.controller;

import com.example.tobi.springbootbasic.dto.MemberCreateRequestDTO;
import com.example.tobi.springbootbasic.dto.MemberResponseDTO;
import com.example.tobi.springbootbasic.model.User;
import com.example.tobi.springbootbasic.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequiredArgsConstructor
@RequestMapping("/users")
public class UserController {

    private final UserService userService;

    @GetMapping
    public String findAllUsers(Model model) {
        List<MemberResponseDTO> users = userService.findAll();
        model.addAttribute("users", users);
        return "user-list";
    }

    @GetMapping("/register")
    public String registerForm() {
        return "sign-up";
    }

    @GetMapping("/update/{id}")
    public String updateForm(@PathVariable Long id, Model model) {
        MemberResponseDTO user = userService.findById(id);
        model.addAttribute("user", user);
        return "user-update";
    }

    @PostMapping("/register")
    public String createUser(@RequestBody MemberCreateRequestDTO request) {
        userService.createUser(request.toUser());
        return "redirect:/users";
    }

    // 회원 수정 메소드 추가
    @PutMapping("/{id}")
    public String updateUser(@PathVariable Long id, @RequestBody MemberCreateRequestDTO request) {
        User user = request.toUser();
        user.setId(id); // 기존 사용자 ID를 설정하여 업데이트 처리
        userService.updateUser(user);
        return "redirect:/users";
    }

    @DeleteMapping("/{id}")
    public String deleteUser(@PathVariable Long id) {
        userService.deleteUser(id);
        return "redirect:/users";
    }
}
```

### 5. **HTML 및 JavaScript 수정** (수정 버튼 및 수정 요청 추가)
```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>User Management</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
<div class="container mt-5">
    <h2 class="mb-4">회원 수정</h2>
    <form id="updateForm">
        <div class="form-group">
            <label for="name">이름</label>
            <input th:value="${user.name}" type="text" class="form-control" id="name" name="name" placeholder="이름을 입력하세요" required>
        </div>
        <div class="form-group">
            <label for="email">이메일</label>
            <input th:value="${user.email}" type="email" class="form-control" id="email" name="email" placeholder="이메일을 입력하세요" required>
        </div>
        <div class="form-group">
            <label for="userid">ID</label>
            <input th:value="${user.userid}" type="text" class="form-control" id="userid" name="userid" placeholder="ID를 입력하세요." required>
        </div>
        <div class="form-group">
            <label for="password">비밀번호</label>
            <input type="password" class="form-control" id="password" name="password" placeholder="비밀번호를 입력하세요" required>
        </div>
        <button type="button" class="btn btn-primary" onclick="submitForm()">수정</button>
    </form>
</div>

<!-- JavaScript 수정 요청 -->
<script>
    function submitForm() {
        const formData = {
            name: document.getElementById('name').value,
            email: document.getElementById('email').value,
            userid: document.getElementById('userid').value,
            password: document.getElementById('password').value
        };

        const id = /* 유저 ID를 동적으로 받거나 서버로부터 가져옴 */;

        fetch(`/users/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
            .then(response => {
                if (response.redirected) {
                    window.location.href = response.url;
                } else {
                    return response.text();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('요청 처리 중 오류가 발생했습니다. 잠시 후 다시 시도해 주세요.');
                window.location.href = '/users';
            });
    }
</script>

<!-- Optional JavaScript -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
```

### 설명:
1. **MyBatis**에서 수정 기능을 추가한 후, `updateUser()` 쿼리를 통해 기존 사용자의 정보를 업데이트할 수 있도록 수정 쿼리를 작성했습니다.
2. **UserService**와 **UserController**에서 해당 로직을 호출할 수 있도록 회원 수정 기능을 추가했습니다.
3. **HTML의 수정 폼**을 통해 자바스크립트 함수가 호출되고, `fetch` API로 서버에 **PUT** 요청을 보내 사용자의 정보를 수정할 수 있습니다.
4. 수정 요청이 성공하면 페이지가 새로고침되어, 수정된 사용자가 목록에 반영됩니다.