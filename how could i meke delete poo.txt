회원 삭제 기능을 구현하기 위해, 아래의 흐름을 따를 수 있습니다:

1. **회원 삭제 버튼 클릭 시**: 회원 삭제 버튼을 클릭하면 `user-delete.html`로 이동하여 ID와 비밀번호를 입력할 수 있는 폼이 나타납니다.
2. **폼 제출 시**: ID와 비밀번호를 입력한 후 "삭제" 버튼을 누르면, 서버로 DELETE 요청이 전송됩니다.
3. **서버 측에서 검증 및 삭제**: 서버는 ID와 비밀번호를 확인한 후, 맞으면 회원을 삭제하고, 틀리면 오류 메시지를 반환합니다.

### 1. **UserController 수정**
ID와 비밀번호 입력을 위한 삭제 폼과 회원 삭제 처리 로직을 구현합니다.
```java
package com.example.tobi.springbootbasic.controller;

import com.example.tobi.springbootbasic.dto.MemberResponseDTO;
import com.example.tobi.springbootbasic.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequiredArgsConstructor
@RequestMapping("/users")
public class UserController {

    private final UserService userService;

    @GetMapping
    public String findAllUsers(Model model) {
        List<MemberResponseDTO> users = userService.findAll();
        model.addAttribute("users", users);
        return "user-list";
    }

    @GetMapping("/delete/{id}")
    public String deleteForm(@PathVariable Long id, Model model) {
        model.addAttribute("id", id);  // 삭제할 사용자의 ID 전달
        return "user-delete";  // 회원 삭제 페이지로 이동
    }

    @DeleteMapping("/{id}")
    public String deleteUser(@PathVariable Long id, @RequestParam String password, Model model) {
        boolean isDeleted = userService.deleteUser(id, password);
        if (isDeleted) {
            return "redirect:/users";  // 삭제 성공 시, 사용자 목록 페이지로 리디렉션
        } else {
            model.addAttribute("error", "비밀번호가 일치하지 않거나 사용자 정보를 찾을 수 없습니다.");
            return "user-delete";  // 삭제 실패 시, 오류 메시지를 표시하며 같은 페이지로 리턴
        }
    }
}
```

### 2. **user-delete.html** (회원 삭제 입력 폼)
ID와 비밀번호를 입력받아 삭제 요청을 처리하는 HTML 파일을 생성합니다.
```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>회원 삭제</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
<div class="container mt-5">
    <h2>회원 삭제</h2>
    <form id="deleteForm">
        <div class="form-group">
            <label for="password">비밀번호를 입력하세요</label>
            <input type="password" class="form-control" id="password" name="password" required>
        </div>
        <button type="button" class="btn btn-danger" onclick="submitDeleteForm()">삭제</button>
    </form>

    <!-- 오류 메시지 표시 -->
    <div th:if="${error}" class="alert alert-danger mt-3" th:text="${error}"></div>
</div>

<script>
    function submitDeleteForm() {
        const id = [[${id}]];  // 삭제할 사용자의 ID
        const password = document.getElementById('password').value;

        fetch(`/users/${id}?password=${password}`, {
            method: 'DELETE',
        })
        .then(response => {
            if (response.ok) {
                alert('사용자가 삭제되었습니다.');
                window.location.href = '/users';
            } else {
                alert('비밀번호가 일치하지 않거나 사용자 정보를 찾을 수 없습니다.');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('삭제 요청 처리 중 오류가 발생했습니다.');
        });
    }
</script>

<!-- Optional JavaScript -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
```

### 3. **UserService 수정** (회원 삭제 로직)
ID와 비밀번호를 확인하여 회원 삭제 여부를 처리합니다.
```java
package com.example.tobi.springbootbasic.service;

import com.example.tobi.springbootbasic.mapper.UserMapper;
import com.example.tobi.springbootbasic.model.User;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@Service
@RequiredArgsConstructor
public class UserService {

    private final UserMapper userMapper;
    private final BCryptPasswordEncoder passwordEncoder;

    public boolean deleteUser(Long id, String password) {
        User user = userMapper.findById(id);
        if (user != null && passwordEncoder.matches(password, user.getPassword())) {
            userMapper.deleteById(id);
            return true;
        }
        return false;  // 비밀번호가 일치하지 않거나 사용자 없음
    }
}

================================================```
@DeleteMapping("/{id}")
public ResponseEntity<String> deleteUser(
	@PathVariable Long id, @RequestParam String password) {
    boolean isDeleted = userService.deleteUser(id, password);
    if (isDeleted) {
        return ResponseEntity.ok("Deleted");
    } else {
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid password");
    }
}
 
============================================================
### 4. **MyBatis Mapper 수정**
MyBatis 쿼리는 그대로 사용합니다.
```xml
<delete id="deleteUser" parameterType="long">
    DELETE FROM user WHERE id = #{id};
</delete>
```

### 5. **user-list.html 수정** (삭제 버튼 추가)
회원 목록에서 삭제 버튼을 클릭하면 회원 삭제 페이지로 이동하도록 링크를 추가합니다.
```html
<a th:href="@{/users/delete/{id}(id=${user.id})}" class="btn btn-danger btn-sm">삭제</a>
```

이 코드를 적용하면, **회원 목록**에서 삭제 버튼을 누르면 **회원 삭제 페이지로 이동**하고, **비밀번호 입력** 후 확인하면 서버로 DELETE 요청이 전송되어, 비밀번호가 일치할 경우 회원이 삭제됩니다.