초심자가 이해할 수 있도록 간단하고 명료하게 구성된 공지사항 게시판 코드를 작성해보겠습니다. 아래 코드는 요구 사항을 반영하여 회원가입, 로그인 기능과 공지사항 CRUD (생성, 조회, 수정, 삭제) 기능을 포함하고 있습니다.

### 1. DTO (Data Transfer Object)

```java
// NoticeDTO.java
public class NoticeDTO {
    private Long id;
    private String title;
    private String content;
    private String author;
    private String date;

    // Getters and Setters
}

// UserDTO.java
public class UserDTO {
    private Long id;
    private String username;
    private String password;
    private String email;

    // Getters and Setters
}
```

### 2. MyBatis Mapper (인터페이스)

#### 공지사항 Mapper

```java
// NoticeMapper.java
@Mapper
public interface NoticeMapper {

    List<NoticeDTO> getAllNotices();              // 공지 목록 조회
    NoticeDTO getNoticeById(Long id);             // 공지 상세 조회
    void insertNotice(NoticeDTO notice);          // 공지 작성
    void updateNotice(NoticeDTO notice);          // 공지 수정
    void deleteNotice(Long id);                   // 공지 삭제
    List<NoticeDTO> searchNotices(String keyword); // 공지 검색
}
```

#### 유저 Mapper

```java
// UserMapper.java
@Mapper
public interface UserMapper {

    void registerUser(UserDTO user);               // 회원가입
    UserDTO findByUsername(String username);       // 유저 조회
}
```

### 3. Mapper XML 파일

#### NoticeMapper.xml

```xml
<!-- NoticeMapper.xml -->
<mapper namespace="com.example.mapper.NoticeMapper">
    <select id="getAllNotices" resultType="NoticeDTO">
        SELECT * FROM notice
    </select>

    <select id="getNoticeById" parameterType="long" resultType="NoticeDTO">
        SELECT * FROM notice WHERE id = #{id}
    </select>

    <insert id="insertNotice" parameterType="NoticeDTO">
        INSERT INTO notice (title, content, author, date) 
        VALUES (#{title}, #{content}, #{author}, NOW())
    </insert>

    <update id="updateNotice" parameterType="NoticeDTO">
        UPDATE notice SET title = #{title}, content = #{content} WHERE id = #{id}
    </update>

    <delete id="deleteNotice" parameterType="long">
        DELETE FROM notice WHERE id = #{id}
    </delete>

    <select id="searchNotices" parameterType="string" resultType="NoticeDTO">
        SELECT * FROM notice WHERE title LIKE CONCAT('%', #{keyword}, '%')
    </select>
</mapper>
```

#### UserMapper.xml

```xml
<!-- UserMapper.xml -->
<mapper namespace="com.example.mapper.UserMapper">
    <insert id="registerUser" parameterType="UserDTO">
        INSERT INTO user (username, password, email) 
        VALUES (#{username}, #{password}, #{email})
    </insert>

    <select id="findByUsername" parameterType="string" resultType="UserDTO">
        SELECT * FROM user WHERE username = #{username}
    </select>
</mapper>
```

### 4. 서비스 (Service)

#### NoticeService

```java
// NoticeService.java
@Service
public class NoticeService {

    private final NoticeMapper noticeMapper;

    public NoticeService(NoticeMapper noticeMapper) {
        this.noticeMapper = noticeMapper;
    }

    public List<NoticeDTO> getAllNotices() {
        return noticeMapper.getAllNotices();
    }

    public NoticeDTO getNoticeById(Long id) {
        return noticeMapper.getNoticeById(id);
    }

    public void insertNotice(NoticeDTO notice) {
        noticeMapper.insertNotice(notice);
    }

    public void updateNotice(NoticeDTO notice) {
        noticeMapper.updateNotice(notice);
    }

    public void deleteNotice(Long id) {
        noticeMapper.deleteNotice(id);
    }

    public List<NoticeDTO> searchNotices(String keyword) {
        return noticeMapper.searchNotices(keyword);
    }
}
```

#### UserService

```java
// UserService.java
@Service
public class UserService {

    private final UserMapper userMapper;

    public UserService(UserMapper userMapper) {
        this.userMapper = userMapper;
    }

    public void registerUser(UserDTO user) {
        userMapper.registerUser(user);
    }

    public UserDTO login(String username, String password) {
        UserDTO user = userMapper.findByUsername(username);
        if (user != null && user.getPassword().equals(password)) {
            return user;
        }
        return null;
    }
}
```

### 5. 컨트롤러 (Controller)

#### NoticeController

```java
// NoticeController.java
@RestController
@RequestMapping("/notices")
public class NoticeController {

    private final NoticeService noticeService;

    public NoticeController(NoticeService noticeService) {
        this.noticeService = noticeService;
    }

    @GetMapping
    public List<NoticeDTO> getAllNotices() {
        return noticeService.getAllNotices();
    }

    @GetMapping("/{id}")
    public NoticeDTO getNoticeById(@PathVariable Long id) {
        return noticeService.getNoticeById(id);
    }

    @PostMapping
    public String createNotice(@RequestBody NoticeDTO notice, HttpSession session) {
        notice.setAuthor((String) session.getAttribute("username"));
        noticeService.insertNotice(notice);
        return "공지사항이 등록되었습니다.";
    }

    @PutMapping("/{id}")
    public String updateNotice(@PathVariable Long id, @RequestBody NoticeDTO notice, HttpSession session) {
        notice.setId(id);
        notice.setAuthor((String) session.getAttribute("username"));
        noticeService.updateNotice(notice);
        return "공지사항이 수정되었습니다.";
    }

    @DeleteMapping("/{id}")
    public String deleteNotice(@PathVariable Long id, HttpSession session) {
        noticeService.deleteNotice(id);
        return "공지사항이 삭제되었습니다.";
    }

    @GetMapping("/search")
    public List<NoticeDTO> searchNotices(@RequestParam String keyword) {
        return noticeService.searchNotices(keyword);
    }
}
```

#### UserController

```java
// UserController.java
@RestController
@RequestMapping("/users")
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/signup")
    public String signup(@RequestBody UserDTO user) {
        userService.registerUser(user);
        return "회원가입이 완료되었습니다.";
    }

    @PostMapping("/login")
    public String login(@RequestBody UserDTO user, HttpSession session) {
        UserDTO loginUser = userService.login(user.getUsername(), user.getPassword());
        if (loginUser != null) {
            session.setAttribute("username", loginUser.getUsername());
            return "로그인 성공";
        } else {
            return "로그인 실패";
        }
    }

    @PostMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();
        return "로그아웃되었습니다.";
    }
}
```

### 6. HTML (Thymeleaf 템플릿)

#### 공지사항 목록 페이지 (`list.html`)

```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>공지사항 목록</title>
</head>
<body>
    <h1>공지사항 목록</h1>
    <a href="/users/signup">회원가입</a> | 
    <a href="/users/login">로그인</a> | 
    <a href="/notices/new">글 작성</a>
    
    <form action="/notices/search" method="get">
        <input type="text" name="keyword" placeholder="검색어 입력">
        <button type="submit">검색</button>
    </form>

    <table>
        <tr>
            <th>No</th>
            <th>제목</th>
            <th>작성자</th>
            <th>날짜</th>
            <th>관리</th>
        </tr>
        <tr th:each="notice : ${notices}">
            <td th:text="${notice.id}"></td>
            <td><a th:href="@{/notices/{id}(id=${notice.id})}" th:text="${notice.title}"></a></td>
            <td th:text="${notice.author}"></td>
            <td th:text="${notice.date}"></td>
            <td>
                <a th:href="@{/notices/{id}/edit(id=${notice.id})}">수정</a>
                <form th:action="@{/notices/{id}/delete(id=${notice.id})}" method="post" th:object="${notice}">
                    <button type="submit">삭제</button>
                </form>
            </td>
        </tr>
    </table>
</body>
</html>
```

### 요약

이 코드는 공지사항 게시판의 기본적인 기능을 간단하게 구현한 예제입니다. 요구사항에 맞춰 유저 회원가입, 로그인 기능과 공지사항의 CRUD 기능을 포함하고 있습니다.

1. **공지사항 목록 조회**: 사용자가 작성한 공지사항을 보여줍니다.
2. **검색 기능**: 제목에 키워드가 포함된 공지사항을 검색할 수 있습니다.
3. **회원가입과 로그인**: 유저 정보를 관리